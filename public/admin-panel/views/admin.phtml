<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Сервисная панель</title>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootswatch/3.3.7/paper/bootstrap.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="https://fonts.googleapis.com/css?family=Exo+2" rel="stylesheet">
    <style type="text/css">
        .mt-30 {
            margin-top: 30px;
        }

        .services {
            font-family: 'Exo 2', sans-serif;
        }

        .services .panel.panel-danger {
            border: 1px solid #f5908c;
            color: #f5908c;
        }

        .services .panel-heading {
            background-color: #fff;
            text-align: center;
            margin: 0;
        }

        .services .d-flex {
            display: flex;
        }

        .services .justify-card-content {
            display: flex;
            align-items: flex-end;
            justify-content: center;
        }

        .services .cards > .panel + .panel {
            margin-left: 15px;
        }

        .services .cards .panel {
            padding: 15px;
        }

        .services .cards .panel h5 {
            margin-top: 0;
        }

        .services .max-height-300 {
            max-height: 300px;
        }

    </style>
</head>
<body>
<div id="app">
    <services
            default-service="<?php echo $defaultTab; ?>"
            default-output="Output here ..."
    />
</div>

<script type="text/x-template" id="services">
    <div class="services container mt-30">
        <div class="row">
            <div class="col-sm-10 col-sm-offset-1">

                <services-tabs/>
                <service/>
                <service-output v-show="! isPending"/>
                <loader v-show="isPending"/>
                <component :is="currentCommand.id" v-if="hasDialog"/>

            </div>
        </div>
    </div>
</script>

<script type="text/x-template" id="services-tabs">
    <div class="panel panel-default">
        <h3 class="panel-heading">
            Сервисная панель <span style="color:lightgreen">DEV(тест сервер)</span>
        </h3>
        <ul class="nav nav-tabs nav-justified">

            <li v-for="service in services" :class="{ active: service.id === serviceId }">
                <a href="javascript:;" @click.prevent="! isPending && setService(service)">
                    {{ service.name }}
                </a>
            </li>

        </ul>
    </div>
</script>

<script type="text/x-template" id="service">
    <div class="tab-content mt-30">
        <div class="tab-pane fade in active">
            <div class="d-flex cards" v-for="row in rows">

                <service-command
                        v-for="(command, key) in comandsByRow(row)"
                        :key="command.id"
                        :command="command"
                />

            </div>
        </div>
    </div>
</script>

<script type="text/x-template" id="service-command">
    <div class="panel panel-default justify-card-content" :class="command.col">
        <div class="panel-body text-center">
            <h5>{{command.name}}</h5>
            <button class="btn btn-primary"
                    @click="onCommandClick"
                    :title="command.description"
                    data-toggle="tooltip"
                    data-placement="bottom"
            >
                {{command.name}}
            </button>
        </div>
    </div>
</script>

<script type="text/x-template" id="service-output">
    <pre
            class="panel panel-default max-height-300"
            :class=" {'panel-danger': hasError} "
    >{{output}}</pre>
</script>

<script type="text/x-template" id="loader">
    <div class="text-center">
        <i class="fa fa-refresh fa-spin fa-2x"></i>
    </div>
</script>

<!--     <script type="text/x-template" id="command-dialog">
        <div :id="currentCommand.dialogId" class="modal fade" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-sm" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <h4 class="modal-title">{{ commandTitle }}</h4>
                    </div>
                    <div class="modal-body">
                        <slot></slot>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">
                            Отмена
                        </button>
                        <button type="button" class="btn btn-primary" data-dismiss="modal" @click.prevent="onSubmitClick">
                            Выполинть
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </script>

    <script type="text/x-template" id="svn-rev">
        <command-dialog>
            <form action="">
                <div class="form-group">
                    <label>Revision</label>
                    <input type="number" class="form-control" min="1" v-model="params.rev">
                </div>
            </form>
        </command-dialog>
    </script>

    <script type="text/x-template" id="svn-log">
        <command-dialog>
            <form action="">
                <div class="form-group">
                    <label>Limit</label>
                    <input type="number" class="form-control" min="1" v-model="params.limit">
                </div>
            </form>
        </command-dialog>
    </script>

    <script type="text/x-template" id="composer-command">
        <command-dialog>
            <form action="">
                <div class="form-group">
                    <label>Command</label>
                    <input type="text" class="form-control" v-model="params.cmd">
                </div>
            </form>
        </command-dialog>
    </script> -->

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<script src="https://unpkg.com/vue@2.4.1/dist/vue.min.js"></script>
<script src="https://unpkg.com/vuex@2.3.1/dist/vuex.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.min.js"></script>

<script>
    'use strict'

    const services = <?php echo $services;?>

    const API_URL = '<?php echo $endpoint;?>'

    services.forEach(function (service) {
        service.commands.forEach(function (command) {
            command.id = service.id + '-' + command.name
            command.dialogId = command.id + '-' + 'dialog'
        })
    })

    // Core

    // API

    function API (url) {
        this.url = url
    }

    API.prototype.prepareParams = function (tab, command, params) {
        return Object.assign({
            tab: tab,
            command: command,
        }, params || {})
    }

    API.prototype.executeCommand = function (tab, command, params, cb) {
        params = this.prepareParams(tab, command, params)

        axios.get(this.url, {params: params})
            .then(function (response) {
                cb(response)
            })
    }

    Vue.api = new API(API_URL)

    // Store

    const store = new Vuex.Store({
        state: {
            services: [],
            defaultOutput: null, // default output if output{id} does not exist
            output: {}, // services output, service: {output, hasError}
            service: null, // current service
            command: null, // current command to execute
            isPending: false, // is current status of the request pending
        },
        getters: {
            services: function (state) {
                return state.services
            },
            getServiceById: function (state, getters) {
                return function (id) {
                    return getters.services.filter(function (service) {
                        return service.id === id
                    }).shift()
                }
            },
            isPending: function (state) {
                return state.isPending
            },
            serviceOutput: function (state, getters) {
                return state.output[getters.serviceId]
            },
            output: function (state, getters) {
                return getters.serviceOutput && getters.serviceOutput.output || state.defaultOutput
            },
            hasError: function (state, getters) {
                return getters.serviceOutput && getters.serviceOutput.hasError || false
            },
            serviceId: function (state) {
                return state.service.id
            },
            serviceName: function (state) {
                return state.service && state.service.name
            },
            serviceCommands: function (state) {
                return state.service && state.service.commands || []
            },
            commandName: function (state) {
                return state.command && state.command.name
            },
            commandTitle: function (state, getters) {
                return getters.serviceName + ' ' + getters.commandName
            },
            currentService: function (state) {
                return state.service
            },
            currentCommand: function (state) {
                return state.command
            },
            hasDialog: function (state) {
                return state.command && state.command.hasDialog
            }
        },
        mutations: {
            setServices: function (state, services) {
                state.services = services
            },
            setService: function (state, service) {
                if (state.service && state.service.id === service.id) {
                    return
                }

                state.service = service
            },
            setDefaultOutput: function (state, defaultOutput) {
                state.defaultOutput = defaultOutput
            },
            setCommand: function (state, command) {
                state.command = command
            },
            setOutput: function (state, output) {
                Vue.set(state.output, state.service.id, output)
            },
            setPending: function (state, pending) {
                state.isPending = pending
            }
        },
        actions: {
            executeCommand: function (context, params) {
                if (context.getters.isPending) {
                    return
                }

                context.commit('setPending', true)

                Vue.api.executeCommand(
                    context.getters.serviceId,
                    context.getters.commandName,
                    params,
                    function (response) {
                        context.commit('setPending', false)
                        context.commit('setOutput', {
                            output: response.data.output,
                            hasError: ! response.data.successful
                        })
                    })

                context.commit('setCommand', null)
            }
        }
    })

    const vuexMixin = {
        computed: Vuex.mapGetters([
            'services',
            'serviceId',
            'serviceName',
            'serviceCommands',
            'commandName',
            'commandTitle',
            'isPending',
            'output',
            'hasError',
            'currentCommand',
            'currentService',
            'hasDialog',
        ]),
        methods: Object.assign(Vuex.mapActions([
                'executeCommand',
            ]), Vuex.mapMutations([
                'setServices',
                'setService',
                'setCommand',
                'setPending',
                'setOutput',
                'setDefaultOutput'
            ])
        )
    }

    const Event = new Vue({})

    Vue.component('services', {
        template: '#services',
        mixins: [
            vuexMixin
        ],
        props: {
            defaultService: {
                type: String,
                required: true
            },
            defaultOutput: {
                type: String,
                required: true
            }
        },
        computed: Object.assign(Vuex.mapMutations([
            ]), Vuex.mapGetters([
                'services',
                'getServiceById'
            ])
        ),
        created: function () {
            this.setServices(services)
            this.setService(this.getServiceById(this.defaultService))
            this.setDefaultOutput(this.defaultOutput)
        }
    })

    Vue.component('services-tabs', {
        template: '#services-tabs',
        mixins: [
            vuexMixin
        ]
    })

    Vue.component('service', {
        template: '#service',
        mixins: [
            vuexMixin
        ],
        computed: {
            rows: function () {
                return this.serviceCommands.reduce(function (max, current) {
                    return Math.max(max, current.row)
                }, 0)
            }
        },
        methods: {
            comandsByRow: function (row) {
                return this.serviceCommands.filter(function (command) {
                    return command.row === row
                })
            }
        }
    })

    Vue.component('service-command', {
        template: '#service-command',
        mixins: [
            vuexMixin
        ],
        props: {
            command: {
                type: Object,
                required: true
            }
        },
        methods: {
            onCommandClick: function () {
                if (! this.isPending) {
                    this.setCommand(this.command)
                }

                if (! this.command.hasDialog) {
                    this.executeCommand()
                }
            }
        }
    })

    Vue.component('service-output', {
        template: '#service-output',
        computed: Vuex.mapGetters([
            'output',
            'hasError'
        ])
    })

    Vue.component('loader', {
        template: '#loader',
    })

    Vue.component('command-dialog', {
        template: '#command-dialog',
        mixins: [
            vuexMixin
        ],
        mounted: function () {
            const $this = this
            if (this.currentCommand.hasDialog) {
                $('#' + this.currentCommand.dialogId)
                    .modal('show')
                    .one('hidden.bs.modal', function () {
                        $this.setCommand(null)
                    })
            }
        },
        methods: {
            onSubmitClick: function () {
                Event.$emit('command:dialog-submitted')
            }
        }
    })

    const customDialog = {
        mixins: [
            vuexMixin
        ],
        created: function () {
            Event.$on('command:dialog-submitted', this.onDialogSubmitted)
        },
        beforeDestroy: function () {
            Event.$off('command:dialog-submitted')
        },
        methods: {
            onDialogSubmitted: function () {
                if (! this.params) {
                    console.error(
                        '[' + this.$options._componentTag + ']' + ' params is undefined.'
                    )

                    return
                }
                this.executeCommand(this.params)
            }
        }
    }

    // // Dialogs
    // Vue.component('svn-rev', {
    //     template: '#svn-rev',
    //     mixins: [
    //         customDialog,
    //     ],
    //     data: function () {
    //         return {
    //             params: {
    //                 rev: 1,
    //             }
    //         }
    //     }
    // })

    // Vue.component('svn-log', {
    //     template: '#svn-log',
    //     mixins: [
    //         customDialog
    //     ],
    //     data: function () {
    //         return {
    //             params: {
    //                 limit: 20,
    //             }
    //         }
    //     }
    // })

    // Vue.component('composer-command', {
    //     template: '#composer-command',
    //     mixins: [
    //         customDialog
    //     ],
    //     data: function () {
    //         return {
    //             params: {
    //                 cmd: 'post-update-cmd',
    //             }
    //         }
    //     }
    // })

    const app = new Vue({
        el: '#app',
        store: store,
    })

    $('[data-toggle="tooltip"]').tooltip()

</script>
</body>
</html>
